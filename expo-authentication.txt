bisakah membuat  autentikasi expo-router, http client menggunakan axios. autentikasi menggunakan email dan password. response token disimpan ke dalam secure-storage. sediakan juga autentikasi provider. buat dalam bahasa javascript. konfigurasi expo-router



(optional)
konfigurasi expo-router


bisakah rancang aplikasi react native menggunakan expo-router dengan autentikasi dengan token. http client menggunakan axios. dalam bahasa pemrograman javascript

Tentu, saya bisa membantu Anda merancang aplikasi React Native menggunakan expo-router dengan autentikasi token dan axios sebagai HTTP client. Berikut adalah rancangan dasar untuk aplikasi tersebut dalam bahasa JavaScript:
1. Pertama, pastikan Anda telah menginstal dependensi yang diperlukan:

npx create-expo-app my-app --template blank && cd my-app

npx expo install expo-router react-native-safe-area-context react-native-screens expo-linking expo-constants expo-status-bar

npm install axios @react-native-async-storage/async-storage

2. Buat struktur folder berikut:

app/
  (auth)/
    login.js
    register.js
  (app)/
    home.js
    profile.js
  _layout.js
utils/
  api.js
  auth.js

3. Buat file app/_layout.js:

import { Slot, Stack } from 'expo-router';
import { AuthProvider } from '../utils/auth';

export default function RootLayout() {
  return (
    <AuthProvider>
      <Stack>
        <Stack.Screen name="(auth)" options={{ headerShown: false }} />
        <Stack.Screen name="(app)" options={{ headerShown: false }} />
      </Stack>
    </AuthProvider>
  );
}

4. Buat file utils/api.js untuk mengatur axios:

import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

const api = axios.create({
  baseURL: 'https://api.example.com', // Ganti dengan URL API Anda
});

api.interceptors.request.use(
  async (config) => {
    const token = await AsyncStorage.getItem('userToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default api;

5. Buat file utils/auth.js untuk mengelola autentikasi:

import React, { createContext, useState, useContext, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter, useSegments } from 'expo-router';

const AuthContext = createContext(null);

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const router = useRouter();
  const segments = useSegments();

  useEffect(() => {
    checkToken();
  }, []);

  useEffect(() => {
    const inAuthGroup = segments[0] === '(auth)';
    if (!user && !inAuthGroup) {
      router.replace('/login');
    } else if (user && inAuthGroup) {
      router.replace('/home');
    }
  }, [user, segments]);

  async function checkToken() {
    const token = await AsyncStorage.getItem('userToken');
    if (token) {
      setUser({ token });
    }
  }

  async function signIn(token) {
    await AsyncStorage.setItem('userToken', token);
    setUser({ token });
  }

  async function signOut() {
    await AsyncStorage.removeItem('userToken');
    setUser(null);
  }

  return (
    <AuthContext.Provider value={{ user, signIn, signOut }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
}

6. Buat file app/(auth)/login.js:

import React, { useState } from 'react';
import { View, TextInput, Button, StyleSheet } from 'react-native';
import { useAuth } from '../../utils/auth';
import api from '../../utils/api';

export default function Login() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const { signIn } = useAuth();

  async function handleLogin() {
    try {
      const response = await api.post('/login', { username, password });
      signIn(response.data.token);
    } catch (error) {
      console.error('Login failed:', error);
    }
  }

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.input}
        placeholder="Username"
        value={username}
        onChangeText={setUsername}
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      <Button title="Login" onPress={handleLogin} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 20,
  },
  input: {
    marginBottom: 10,
    padding: 10,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
  },
});


7. Buat file app/(app)/home.js:

import React from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import { useAuth } from '../../utils/auth';

export default function Home() {
  const { signOut } = useAuth();

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Welcome to Home</Text>
      <Button title="Sign Out" onPress={signOut} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    marginBottom: 20,
  },
});

Ini adalah rancangan dasar untuk aplikasi React Native menggunakan expo-router dengan autentikasi token dan axios sebagai HTTP client. Anda perlu menambahkan lebih banyak layar dan fungsionalitas sesuai kebutuhan aplikasi Anda.
Beberapa poin penting:
Gunakan AuthProvider untuk mengelola state autentikasi global.
useAuth hook digunakan untuk mengakses fungsi autentikasi di komponen.
Axios diatur dengan interceptor untuk menambahkan token ke setiap permintaan.
Routing diatur menggunakan expo-router dengan grup (auth) dan (app).
Jangan lupa untuk mengganti URL API di utils/api.js dengan URL API Anda yang sebenarnya. Anda juga perlu mengimplementasikan logika registrasi dan endpoint API yang sesuai di sisi server.